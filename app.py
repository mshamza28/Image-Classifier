# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdxAeDxK605rpTarPMTdAyFoMNEm4r7t
"""

import streamlit as st
from PIL import Image
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions
import matplotlib.pyplot as plt
import requests
from streamlit_lottie import st_lottie
import plotly.express as px

# Custom CSS
st.markdown("""
<style>
.big-font {
    font-size:20px !important;
}
</style>
""", unsafe_allow_html=True)

# Load the pre-trained ResNet50 model
model = ResNet50(weights='imagenet')

def load_lottieurl(url):
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()

def predict_and_show(img_data):
    # Load and preprocess the image
    img = Image.open(img_data)
    img = img.resize((224, 224), Image.NEAREST)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    # Make predictions
    predictions = model.predict(x)

    # Decode predictions
    decoded_predictions = decode_predictions(predictions, top=3)[0]

    return decoded_predictions

# Sidebar - Advanced options
st.sidebar.header('Advanced Options')
confidence_threshold = st.sidebar.slider('Confidence Threshold', 0, 100, 20)

# Streamlit UI
st.title('Image Classifier')
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    uploaded_image = Image.open(uploaded_file)
    st.image(uploaded_image, caption='Uploaded Image', use_column_width=True)
    st.write("<p class='big-font'>Classifying...</p>", unsafe_allow_html=True)

    # Display Lottie animation
    lottie_url = "https://lottie.host/0947e056-459f-4085-ac4e-5ff581720adf/7idKi02kJv.json"  # Replace this with your Lottie animation URL
    lottie_animation = load_lottieurl(lottie_url)
    st_lottie(lottie_animation, height=200, key="classification")

    predictions = predict_and_show(uploaded_file)

    # Display predictions as a Plotly bar chart
    labels = [pred[1] for pred in predictions]
    scores = [pred[2] * 100 for pred in predictions]
    fig = px.bar(x=labels, y=scores, labels={'x':'Predicted Class', 'y':'Confidence (%)'}, title="Top Predictions")
    st.plotly_chart(fig, use_container_width=True)
    
    # Expandable section with prediction details
    with st.expander("See prediction details"):
        for pred in predictions:
            st.write(f"{pred[1].capitalize()}: {pred[2]*100:.2f}% confidence")
# Footer
st.markdown("---")
st.markdown("Built with ❤️ using Streamlit")

